import pygame
import numpy as np
import random
import math
import csv
import os

pygame.init()

WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GRAY = (128, 128, 128)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

class Puck:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class HomeRegion:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.collected_pucks = 0

class Robot:
    def __init__(self, x, y, arena_size, D, vision_range, robot_radius, home_regions):
        self.x = x
        self.y = y
        self.angle = random.uniform(0, 2*math.pi)
        self.carrying_puck = False
        self.state = 'searching'
        self.arena_size = arena_size
        self.D = D
        self.home_regions = home_regions
        self.current_home = self.find_nearest_home(x, y)
        self.origin_x = x
        self.origin_y = y
        self.vision_range = vision_range
        self.vision_angle = math.pi/4 
        self.robot_radius = robot_radius
        self.collision_range = 2 * robot_radius

    def find_nearest_home(self, x, y):
        nearest_home = min(self.home_regions, 
                         key=lambda h: math.hypot(h.x - x, h.y - y))
        return nearest_home

    def move(self, robots):
        if self.state == 'searching':
            self.angle += random.uniform(-0.5, 0.5)
            dx = math.cos(self.angle)
            dy = math.sin(self.angle)
        elif self.state == 'homing':
            dx = (self.current_home.x - self.x)
            dy = (self.current_home.y - self.y)
        elif self.state == 'returning':
            dx = (self.origin_x - self.x)
            dy = (self.origin_y - self.y)

        distance = math.hypot(dx, dy)
        if distance != 0:
            dx /= distance
            dy /= distance

        avoid_dx, avoid_dy = self.collision_avoidance(robots)

        total_dx = dx + avoid_dx
        total_dy = dy + avoid_dy

        total_distance = math.hypot(total_dx, total_dy)
        if total_distance != 0:
            total_dx /= total_distance
            total_dy /= total_distance

        self.x = np.clip(self.x + total_dx, 0, self.arena_size)
        self.y = np.clip(self.y + total_dy, 0, self.arena_size)
        self.angle = math.atan2(total_dy, total_dx)

        if self.state == 'searching' and np.hypot(self.x - self.origin_x, self.y - self.origin_y) > self.D:
            self.state = 'returning'
        elif self.state == 'returning' and np.hypot(self.x - self.origin_x, self.y - self.origin_y) < self.D/2:
            self.state = 'searching'
        elif self.state == 'homing' and np.hypot(self.x - self.origin_x, self.y - self.origin_y) > self.D:
            self.drop_puck()
            return True
        return False

    def collision_avoidance(self, robots):
        avoid_dx = 0
        avoid_dy = 0
        for other in robots:
            if other is self:
                continue
            dx = self.x - other.x
            dy = self.y - other.y
            distance = math.hypot(dx, dy)
            if distance < self.collision_range and distance > 0:
                repulsion = (self.collision_range - distance) / self.collision_range
                avoid_dx += (dx / distance) * repulsion
                avoid_dy += (dy / distance) * repulsion
        return avoid_dx, avoid_dy

    def can_see_puck(self, puck):
        dx = puck.x - self.x
        dy = puck.y - self.y
        distance = math.hypot(dx, dy)
        if distance > self.vision_range:
            return False
        angle_to_puck = math.atan2(dy, dx)
        angle_diff = abs((angle_to_puck - self.angle + math.pi) % (2 * math.pi) - math.pi)
        return angle_diff <= self.vision_angle / 2

    def pick_up_puck(self):
        self.carrying_puck = True
        self.state = 'homing'
        self.current_home = self.find_nearest_home(self.x, self.y)

    def drop_puck(self):
        self.carrying_puck = False
        self.state = 'returning'

class Simulation:
    def __init__(self, arena_size, num_robots, num_pucks, num_homes, D, speed, vision_range, robot_radius, render=True):
        self.arena_size = arena_size
        self.numpucks = num_pucks
        self.D = D
        self.num_robots = num_robots
        
        self.home_regions = []
        for _ in range(num_homes):
            x = random.uniform(0, arena_size)
            y = random.uniform(0, arena_size)
            self.home_regions.append(HomeRegion(x, y))
        
        self.robots = [Robot(random.uniform(0, arena_size), random.uniform(0, arena_size),
                           arena_size, D, vision_range, robot_radius, self.home_regions) 
                      for _ in range(num_robots)]
        
        self.pucks = [Puck(random.uniform(0, arena_size), random.uniform(0, arena_size)) 
                     for _ in range(num_pucks)]

        self.speed = speed
        self.render = render
        self.metrics = {'time': [], 'collected_pucks': []}

        if self.render:
            self.width = 800
            self.height = 800
            self.screen = pygame.display.set_mode((self.width, self.height))
            pygame.display.set_caption("Multi-Robot Multi-Home Foraging Simulation")
            self.clock = pygame.time.Clock()
            self.font = pygame.font.Font(None, 36)

    def step(self, timestep):
        for _ in range(self.speed):
            for robot in self.robots:
                puck_dropped = robot.move(self.robots)
                if puck_dropped:
                    self.pucks.append(Puck(robot.x, robot.y))
                if not robot.carrying_puck and robot.state == 'searching':
                    for puck in self.pucks:
                        if robot.can_see_puck(puck):
                            robot.pick_up_puck()
                            self.pucks.remove(puck)
                            break
                elif robot.carrying_puck and np.hypot(robot.x - robot.current_home.x, robot.y - robot.current_home.y) < 2:
                    robot.drop_puck()
                    robot.current_home.collected_pucks += 1

        total_collected = sum(home.collected_pucks for home in self.home_regions)
        self.metrics['time'].append(timestep)
        self.metrics['collected_pucks'].append(total_collected)

    def draw(self):
        self.screen.fill(WHITE)

        for home in self.home_regions:
            pygame.draw.circle(self.screen, GREEN, 
                             self.to_screen_coords(home.x, home.y),
                             int(3 * self.width / self.arena_size))
            text = self.font.render(str(home.collected_pucks), True, (0, 0, 0))
            pos = self.to_screen_coords(home.x, home.y)
            self.screen.blit(text, (pos[0] - 10, pos[1] - 10))

        for puck in self.pucks:
            pygame.draw.circle(self.screen, RED, 
                             self.to_screen_coords(puck.x, puck.y),
                             int(0.5 * self.width / self.arena_size))

        for robot in self.robots:
            color = BLUE if robot.carrying_puck else GRAY
            pos = self.to_screen_coords(robot.x, robot.y)
            radius = int(robot.robot_radius * self.width / self.arena_size)
            pygame.draw.circle(self.screen, color, pos, radius)

            # Draw robot's vision cone
            vision_length = robot.vision_range * self.width / self.arena_size
            left_angle = robot.angle - robot.vision_angle / 2
            right_angle = robot.angle + robot.vision_angle / 2
            left_end = (pos[0] + vision_length * math.cos(left_angle), 
                       pos[1] + vision_length * math.sin(left_angle))
            right_end = (pos[0] + vision_length * math.cos(right_angle), 
                        pos[1] + vision_length * math.sin(right_angle))
            pygame.draw.line(self.screen, YELLOW, pos, left_end, 1)
            pygame.draw.line(self.screen, YELLOW, pos, right_end, 1)
            pygame.draw.arc(self.screen, YELLOW, 
                          (pos[0] - vision_length, pos[1] - vision_length,
                           vision_length * 2, vision_length * 2),
                          -left_angle, -right_angle, 1)

            pygame.draw.circle(self.screen, YELLOW, 
                             self.to_screen_coords(robot.origin_x, robot.origin_y),
                             int(robot.D * self.width / self.arena_size), 1)

        total_collected = sum(home.collected_pucks for home in self.home_regions)
        text = self.font.render(f'Total collected pucks: {total_collected}', True, (0, 0, 0))
        self.screen.blit(text, (10, 10))

    def run(self, max_steps):
        step = 0
        while step < max_steps:
            if self.render:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        return

            self.step(step)

            total_collected = sum(home.collected_pucks for home in self.home_regions)
            if total_collected >= self.numpucks:
                break
        
            if self.render:
                self.draw()
                pygame.display.flip()
                self.clock.tick(30)

            step += 1

        if self.render:
            pygame.quit()

    def to_screen_coords(self, x, y):
        return int(x * self.width / self.arena_size), int(y * self.height / self.arena_size)

def run_simulation():
    arena_size = 64
    num_robots = 100
    num_pucks = 300
    num_homes = 4  
    D = 20  
    speed = 1
    vision_range = 5
    robot_radius = 0.5
    render = True
    max_steps = 2000

    sim = Simulation(arena_size, num_robots, num_pucks, num_homes, 
                    D, speed, vision_range, robot_radius, render)
    sim.run(max_steps)

if __name__ == '__main__':
    run_simulation()
